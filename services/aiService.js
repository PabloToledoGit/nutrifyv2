import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

export const gerarTextoReceita = async (userData) => {
  const {
    peso,
    altura,
    idade,
    genero,
    calorias,
    alimentosSelecionadosCafe,
    alimentosSelecionadosAlmoco,
    alimentosSelecionadosLanche,
    alimentosSelecionadosJanta,
    nivelAtividade,
    planoNome,
    historicoSaude = "",
    incluiTreino = false,
    incluiDiaLixo = false
  } = userData;

  const treinoAtivo = String(incluiTreino).toLowerCase() === 'true' || incluiTreino === true;
  const lixoAtivo = String(incluiDiaLixo).toLowerCase() === 'true' || incluiDiaLixo === true;

  // C√°lculo do IMC
  const alturaEmMetros = altura / 100;
  const imc = peso / (alturaEmMetros * alturaEmMetros);

  // Classifica√ß√£o do IMC
  let categoriaIMC = "";
  if (imc < 18.5) categoriaIMC = "Baixo";
  else if (imc < 25) categoriaIMC = "Eutr√≥fico";
  else if (imc < 30) categoriaIMC = "Sobrepeso";
  else if (imc < 35) categoriaIMC = "Obesidade I";
  else if (imc < 40) categoriaIMC = "Obesidade II";
  else categoriaIMC = "Obesidade III";

  // Prote√≠na por kg conforme IMC + G√™nero
  const tabelaProteina = {
    Masculino: {
      "Baixo": 2.2,
      "Eutr√≥fico": 2.0,
      "Sobrepeso": 1.8,
      "Obesidade I": 1.6,
      "Obesidade II": 1.4,
      "Obesidade III": 1.2,
    },
    Feminino: {
      "Baixo": 2.2,
      "Eutr√≥fico": 1.9,
      "Sobrepeso": 1.6,
      "Obesidade I": 1.4,
      "Obesidade II": 1.2,
      "Obesidade III": 1.0,
    }
  };

  const proteinaPorKg = tabelaProteina[genero]?.[categoriaIMC] || 2.0;
  const proteinaTotalG = Math.round(peso * proteinaPorKg);
  const proteinaKcal = proteinaTotalG * 4;

  // üí° Novo c√°lculo de ajuste cal√≥rico com base no plano e IMC
  let ajusteCalorias = 0;

  if (planoNome.toLowerCase().includes("emagrecer power")) {
    ajusteCalorias = -Math.round(Math.random() * 100 + 600); // entre -600 e -700
  } else if (planoNome.toLowerCase().includes("emagrecer") || categoriaIMC === "Sobrepeso" || categoriaIMC.includes("Obesidade")) {
    ajusteCalorias = -500; // emagrecimento padr√£o
  } else if (planoNome.toLowerCase().includes("hipertrofia")) {
    if (categoriaIMC === "Baixo" || categoriaIMC === "Eutr√≥fico") {
      ajusteCalorias = 300;
    } else {
      ajusteCalorias = -500; // se tiver sobrepeso, prioridade √© emagrecer
    }
  } else {
    ajusteCalorias = 0; // plano padr√£o
  }

  const caloriasAjustadas = Math.round(calorias + ajusteCalorias);


  console.log("[Prompt] treinoAtivo:", treinoAtivo);
  console.log("[Prompt] lixoAtivo:", lixoAtivo);

  const prompt = `
**Aten√ß√£o: Priorize o hist√≥rico de sa√∫de do cliente em todas as decis√µes da dieta e treino. Nenhum alimento, suplemento ou atividade deve ser recomendada caso contrarie restri√ß√µes ou condi√ß√µes descritas.**

Hist√≥rico de sa√∫de informado pelo cliente:
${historicoSaude}

Utilize os dados abaixo para gerar um plano nutricional${treinoAtivo ? ' e de treino' : ''} personalizado em **HTML e CSS embutido**, com apar√™ncia visual semelhante ao plano "Dieta NutriInteligente", mas adaptado √† identidade moderna e limpa do Nutrify (tons de verde, blocos bem definidos, t√≠tulos claros e se√ß√µes bem divididas).

Informa√ß√µes do Usu√°rio:
- Nome do Plano: ${planoNome}
- Peso: ${peso} kg
- Altura: ${altura} cm
- Idade: ${idade} anos
- G√™nero: ${genero}
- IMC: ${imc.toFixed(2)} (${categoriaIMC})
- N√≠vel de Atividade F√≠sica: ${nivelAtividade} (multiplicador da f√≥rmula Harris-Benedict)
- Calorias di√°rias estimadas (ajustadas): ${caloriasAjustadas}


Prefer√™ncias Alimentares:
- Caf√© da Manh√£: ${alimentosSelecionadosCafe}
- Almo√ßo: ${alimentosSelecionadosAlmoco}
- Lanche: ${alimentosSelecionadosLanche}
- Jantar: ${alimentosSelecionadosJanta}

üìå **Regras para o Plano:**
- Inclua um aviso de exclusividade e privacidade no topo
- Calcule e explique o **IMC** e a **ingest√£o ideal de √°gua**
- Calcule os **macronutrientes di√°rios** com base nas calorias e peso corporal:
  - **Prote√≠na:** ${proteinaPorKg.toFixed(1)}g por kg de peso corporal (ex: ${peso}kg √ó ${proteinaPorKg} = ${proteinaTotalG}g prote√≠na = ${proteinaKcal} kcal)
  - **Gordura:** 1.0g por kg de peso corporal (ex: ${peso}g = ${peso * 9} kcal)
  - **Carboidrato:** Use o restante das calorias totais ap√≥s calcular prote√≠na e gordura
  - Use a convers√£o padr√£o:
    - Prote√≠na e Carboidrato = 4 kcal/g
    - Gordura = 9 kcal/g
- Mostre a distribui√ß√£o total dos macros com gramas e calorias, em um bloco explicativo

- Divida as **refei√ß√µes** com:
  - T√≠tulo com hor√°rio e calorias estimadas da refei√ß√£o
  - Para cada refei√ß√£o, siga a propor√ß√£o cal√≥rica do total di√°rio:
    - Caf√© da Manh√£: 20%
    - Lanche da Manh√£: 15%
    - Almo√ßo: 25%
    - Lanche da Tarde: 15%
    - Jantar: 25%
  - Apresente **exatamente 3 op√ß√µes diferentes**, rotuladas como:
    - Op√ß√£o 1:
    - Op√ß√£o 2:
    - Op√ß√£o 3:
  - Cada op√ß√£o deve conter:
    - Uma refei√ß√£o completa individual com por√ß√µes em gramas ou unidades
    - Calorias **aproximadamente iguais** entre as op√ß√µes (m√°ximo de 10% de varia√ß√£o)
    - Macros equilibrados com base no c√°lculo di√°rio
  - Nunca induzir o cliente a consumir mais de uma op√ß√£o por refei√ß√£o

- Inclua **substitui√ß√µes inteligentes** para prote√≠nas, carboidratos e gorduras, respeitando o hist√≥rico de sa√∫de
- **Sugira h√°bitos saud√°veis e suplementos** com base no objetivo (respeitando o hist√≥rico de sa√∫de)

${lixoAtivo ? `
üçï **Inclua uma se√ß√£o completa chamada "Dia do Lixo":**
- T√≠tulo: ‚ÄúDia do Lixo‚Äù
- Par√°grafo explicando detalhadamente o conceito de refei√ß√£o livre
- Sugira alimentos que podem ser inclu√≠dos como exemplo
- Indique o **melhor momento da semana para aplicar**, considerando o objetivo
- Finalize com um refor√ßo motivacional
` : ''}

${treinoAtivo ? `
üèãÔ∏è **Inclua uma se√ß√£o completa chamada "Plano de Treino Personalizado":**
- T√≠tulo: "Plano de Treino Semanal"
- Divida a semana com foco muscular
- Liste de 4 a 6 exerc√≠cios por dia com:
  - Nome
  - S√©ries
  - Repeti√ß√µes
  - Descanso
  - Dicas t√©cnicas
- Inclua varia√ß√µes para treino em casa e sem equipamentos
` : ''}

üí° Estrutura HTML:
- Use <h1>, <h2>, <h3> para os t√≠tulos
- <p> para explica√ß√µes e dados
- <ul><li> para listas de alimentos ou exerc√≠cios
- N√£o use <table>
- Inclua classes CSS inline com estilo leve
- O conte√∫do deve estar dentro de: <div class='receita'> ... </div>

‚ö†Ô∏è Importante:
- **N√£o inclua** <html>, <head>, <body>, nem markdown
- **N√£o use coment√°rios**
- O conte√∫do gerado deve ser colado diretamente na fun√ß√£o gerarHTMLReceita()

Visual clean, leve, bonito e organizado ‚Äî com cara de eBook, mas sem excesso de firula.
`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
    });

    let resposta = completion.choices?.[0]?.message?.content || "";

    // üö´ Remove blocos ```html e ```
    resposta = resposta.replace(/```html|```/g, "").trim();

    if (!resposta) {
      console.error("Resposta vazia da OpenAI", completion);
      throw new Error("Erro: Resposta vazia da OpenAI.");
    }

    return resposta;
  } catch (error) {
    console.error("Erro na gera√ß√£o da receita:", error);
    throw new Error(`Erro na gera√ß√£o da receita: ${error.message}`);
  }
};
