// services/recipeService.js
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

export const gerarTextoReceita = async (userData) => {
  const {
    peso,
    altura,
    idade,
    genero,
    objetivo,
    calorias,
    alimentosSelecionadosCafe,
    alimentosSelecionadosAlmoco,
    alimentosSelecionadosLanche,
    alimentosSelecionadosJanta,
    frequenciaTreino,
    planoNome,
    historicoSaude = "",
    incluiTreino = false,
    incluiDiaLixo = false
  } = userData;

  // üîí Corrigir poss√≠veis tipos incorretos de boolean vindo como string
  const treinoAtivo = String(incluiTreino).toLowerCase() === 'true' || incluiTreino === true;
  const lixoAtivo = String(incluiDiaLixo).toLowerCase() === 'true' || incluiDiaLixo === true;

  const prompt = `
**Aten√ß√£o: Priorize o hist√≥rico de sa√∫de do cliente em todas as decis√µes da dieta e treino. Nenhum alimento, suplemento ou atividade deve ser recomendada caso contrarie restri√ß√µes ou condi√ß√µes descritas.**

Hist√≥rico de sa√∫de informado pelo cliente:
${historicoSaude}

Utilize os dados abaixo para gerar um plano nutricional${treinoAtivo ? ' e de treino' : ''} personalizado em formato de **HTML e CSS**, adaptado para o modelo de layout do Nutrify. O conte√∫do precisa estar diretamente pronto para ser inserido na fun√ß√£o gerarHTMLReceita(), sem usar markdown:

Informa√ß√µes do Usu√°rio:
- Nome do Plano: ${planoNome}
- Peso: ${peso} kg
- Altura: ${altura} cm
- Idade: ${idade} anos
- G√™nero: ${genero}
- Objetivo: ${objetivo}
- Calorias di√°rias: ${calorias}
- Frequ√™ncia de treino: ${frequenciaTreino}

Prefer√™ncias Alimentares:
- Caf√© da Manh√£: ${alimentosSelecionadosCafe}
- Almo√ßo: ${alimentosSelecionadosAlmoco}
- Lanche: ${alimentosSelecionadosLanche}
- Jantar: ${alimentosSelecionadosJanta}

Estrutura Esperada:
- Utilize <h1> a <h4> para t√≠tulos e subt√≠tulos
- Use <ul> e <li> para listas de alimentos
- Use <p> para textos gerais
- Os t√≠tulos principais devem ter cor verde (#15803d) e usar a estrutura do HTML que ser√° injetada dentro da div com classe 'receita'.

Regras:
- Divida as refei√ß√µes (caf√©, almo√ßo, lanche, jantar) com op√ß√µes diferentes
- Atribua quantidade de calorias proporcional: Caf√© (20%), Lanche Manh√£ (15%), Almo√ßo (25%), Lanche Tarde (15%), Jantar (25%)
- Apresente substitui√ß√µes para prote√≠nas, carboidratos e gorduras
- Mostre hor√°rios indicados para cada refei√ß√£o
- Calcule IMC e √°gua ideal com explica√ß√£o
- Sugira h√°bitos e suplementos com base no objetivo, respeitando o hist√≥rico de sa√∫de

${treinoAtivo ? `Inclua um plano de treino semanal, com dias divididos, exerc√≠cios, repeti√ß√µes, tempo de descanso e observa√ß√µes ‚Äî adaptado ao hist√≥rico de sa√∫de do cliente.` : ''}

${lixoAtivo ? `Adicione uma se√ß√£o chamada "Dia do Lixo" com instru√ß√µes para uma refei√ß√£o livre semanal, explicando como aproveitar sem prejudicar os resultados, considerando o hist√≥rico de sa√∫de.` : ''}

Importante:
- N√£o inclua cabe√ßalho, HTML, HEAD, BODY, nem CSS.
- Apenas o conte√∫do dentro da <div class='receita'>...
- N√£o coloque coment√°rios, apenas HTML v√°lido.
`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
    });

    let resposta = completion.choices?.[0]?.message?.content || "";

    // üö´ Remover blocos ```html e ```
    resposta = resposta.replace(/```html|```/g, "").trim();

    if (!resposta) {
      console.error("Resposta vazia da OpenAI", completion);
      throw new Error("Erro: Resposta vazia da OpenAI.");
    }

    return resposta;
  } catch (error) {
    console.error("Erro na gera√ß√£o da receita:", error);
    throw new Error(`Erro na gera√ß√£o da receita: ${error.message}`);
  }
};
