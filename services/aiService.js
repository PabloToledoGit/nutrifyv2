import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

export const gerarTextoReceita = async (userData) => {
  const {
    peso,
    altura,
    idade,
    genero,
    alimentosSelecionadosCafe,
    alimentosSelecionadosAlmoco,
    alimentosSelecionadosLanche,
    alimentosSelecionadosJanta,
    nivelAtividade,
    planoNome,
    historicoSaude = "",
    incluiTreino = false,
    incluiDiaLixo = false
  } = userData;

  const treinoAtivo = String(incluiTreino).toLowerCase() === 'true' || incluiTreino === true;
  const lixoAtivo = String(incluiDiaLixo).toLowerCase() === 'true' || incluiDiaLixo === true;

  // C√°lculo do IMC
  const alturaEmMetros = altura / 100;
  const imc = peso / (alturaEmMetros * alturaEmMetros);

  // Classifica√ß√£o do IMC
  let categoriaIMC = "";
  if (imc < 18.5) categoriaIMC = "Baixo";
  else if (imc < 25) categoriaIMC = "Eutr√≥fico";
  else if (imc < 30) categoriaIMC = "Sobrepeso";
  else if (imc < 35) categoriaIMC = "Obesidade I";
  else if (imc < 40) categoriaIMC = "Obesidade II";
  else categoriaIMC = "Obesidade III";

  // Tabela de prote√≠na por IMC e g√™nero
  const tabelaProteina = {
    Masculino: {
      "Baixo": 2.2,
      "Eutr√≥fico": 2.0,
      "Sobrepeso": 1.8,
      "Obesidade I": 1.6,
      "Obesidade II": 1.4,
      "Obesidade III": 1.2,
    },
    Feminino: {
      "Baixo": 2.2,
      "Eutr√≥fico": 1.9,
      "Sobrepeso": 1.6,
      "Obesidade I": 1.4,
      "Obesidade II": 1.2,
      "Obesidade III": 1.0,
    }
  };

  const temProblemaRenal = historicoSaude.toLowerCase().includes("renal");
  let proteinaPorKg = temProblemaRenal
    ? 1.0
    : tabelaProteina[genero]?.[categoriaIMC] || 2.0;

  const proteinaTotalG = Math.round(peso * proteinaPorKg);
  const proteinaKcal = proteinaTotalG * 4;

  // C√°lculo da TMB
  const tmb = genero === "Masculino"
    ? 66 + (13.75 * peso) + (5 * altura) - (6.75 * idade)
    : 655 + (9.56 * peso) + (1.85 * altura) - (4.68 * idade);

  // Corre√ß√£o do FA
  let fatorAtividadeOriginal = parseFloat(nivelAtividade);
  let fatorAtividadeCorrigido = fatorAtividadeOriginal;
  const planoEmagrecimento = planoNome?.toLowerCase().includes("emagrecer");
  const sobrepesoOuMais = ["Sobrepeso", "Obesidade I", "Obesidade II", "Obesidade III"].includes(categoriaIMC);

  if (planoEmagrecimento && sobrepesoOuMais) {
    if (fatorAtividadeOriginal <= 1.2) fatorAtividadeCorrigido = 1.0;
    else if (fatorAtividadeOriginal <= 1.375) fatorAtividadeCorrigido = 1.1;
    else if (fatorAtividadeOriginal <= 1.55) fatorAtividadeCorrigido = 1.3;
    else if (fatorAtividadeOriginal <= 1.725) fatorAtividadeCorrigido = 1.4;
    else fatorAtividadeCorrigido = 1.5;
  }

  const calorias = Math.round(tmb * fatorAtividadeCorrigido);

  // Ajuste cal√≥rico final
  let ajusteCalorias = 0;
  if (planoNome.toLowerCase().includes("emagrecer power")) {
    ajusteCalorias = -Math.round(Math.random() * 100 + 600); // -600 a -700
  } else if (planoNome.toLowerCase().includes("emagrecer") || categoriaIMC === "Sobrepeso" || categoriaIMC.includes("Obesidade")) {
    ajusteCalorias = -500;
  } else if (planoNome.toLowerCase().includes("hipertrofia")) {
    ajusteCalorias = (categoriaIMC === "Baixo" || categoriaIMC === "Eutr√≥fico") ? 300 : -500;
  }

  const caloriasAjustadas = Math.round(calorias + ajusteCalorias);

  // C√°lculo melhorado para gordura
  let gorduraPorKg;

  switch (categoriaIMC) {
    case "Sobrepeso":
      gorduraPorKg = 0.7;
      break;
    case "Obesidade I":
      gorduraPorKg = 0.6;
      break;
    case "Obesidade II":
    case "Obesidade III":
      gorduraPorKg = 0.5;
      break;
    case "Eutr√≥fico":
      if (caloriasAjustadas >= 3000) gorduraPorKg = 1.0;
      else if (caloriasAjustadas >= 2500) gorduraPorKg = 0.9;
      else if (caloriasAjustadas >= 2000) gorduraPorKg = 0.8;
      else gorduraPorKg = 0.7;
      break;
    default:
      gorduraPorKg = 0.8;
      break;
  }

  const gorduraTotalG = Math.round(peso * gorduraPorKg);
  const gorduraKcal = gorduraTotalG * 9;

  console.log("[Prompt] treinoAtivo:", treinoAtivo);
  console.log("[Prompt] lixoAtivo:", lixoAtivo);

  const prompt = `
**Aten√ß√£o: Priorize o hist√≥rico de sa√∫de do cliente em todas as decis√µes da dieta e treino. Nenhum alimento, suplemento ou atividade deve ser recomendada caso contrarie restri√ß√µes ou condi√ß√µes descritas.**

Hist√≥rico de sa√∫de informado pelo cliente:
${historicoSaude}

Utilize os dados abaixo para gerar um plano nutricional${treinoAtivo ? ' e de treino' : ''} personalizado em **HTML e CSS embutido**, com apar√™ncia visual semelhante ao plano "Dieta NutriInteligente", mas adaptado √† identidade moderna e limpa do Nutrify (tons de verde, blocos bem definidos, t√≠tulos claros e se√ß√µes bem divididas).

Informa√ß√µes do Usu√°rio:
- Nome do Plano: ${planoNome}
- Peso: ${peso} kg
- Altura: ${altura} cm
- Idade: ${idade} anos
- G√™nero: ${genero}
- IMC: ${imc.toFixed(2)} (${categoriaIMC})
- N√≠vel de Atividade F√≠sica: ${nivelAtividade} (original) / ${fatorAtividadeCorrigido} (ajustado)
- Calorias di√°rias estimadas (ajustadas): ${caloriasAjustadas} kcal

Prefer√™ncias Alimentares:
- Caf√© da Manh√£: ${alimentosSelecionadosCafe}
- Almo√ßo: ${alimentosSelecionadosAlmoco}
- Lanche: ${alimentosSelecionadosLanche}
- Jantar: ${alimentosSelecionadosJanta}

üìå **Regras para o Plano:**
- Inclua um aviso de exclusividade e privacidade no topo
- Inclua um aviso de que √© recomend√°vel trocar a dieta dentro de 20 a 30 dias no topo
- Calcule e explique o **IMC** e a **ingest√£o ideal de √°gua**
- Calcule os **macronutrientes di√°rios** com base nas calorias e peso corporal:

  - **Prote√≠na:** ${proteinaPorKg.toFixed(1)}g/kg (ex: ${peso}kg √ó ${proteinaPorKg} = ${proteinaTotalG}g prote√≠na = ${proteinaKcal} kcal)
    - Caso o hist√≥rico de sa√∫de tenha restri√ß√µes renais, use 1g/kg

  - **Gordura:** ${gorduraPorKg.toFixed(1)}g/kg (ex: ${peso}kg √ó ${gorduraPorKg} = ${gorduraTotalG}g gordura = ${gorduraKcal} kcal)
    - Regras utilizadas para gordura:
      - Eutr√≥fico:
        - ‚â• 3000 kcal: 1.0g/kg
        - ‚â• 2500 kcal: 0.9g/kg
        - ‚â• 2000 kcal: 0.8g/kg
        - < 2000 kcal: 0.7g/kg
      - Sobrepeso: 0.7g/kg
      - Obesidade I: 0.6g/kg
      - Obesidade II ou III: 0.5g/kg

  - **Carboidrato:** Use o restante das calorias totais
  - Convers√£o:
    - Prote√≠na/Carboidrato = 4 kcal/g
    - Gordura = 9 kcal/g

- Mostre a distribui√ß√£o total dos macros com gramas e calorias, em um bloco explicativo

- Divida as **refei√ß√µes** com:
  - T√≠tulo com hor√°rio e calorias estimadas
  - Siga a divis√£o cal√≥rica:
    - Caf√© da Manh√£: 20%
    - Lanche da Manh√£: 15%
    - Almo√ßo: 25%
    - Lanche da Tarde: 15%
    - Jantar: 25%
  - Para cada refei√ß√£o, apresente 3 op√ß√µes:
    - Op√ß√£o 1:
    - Op√ß√£o 2:
    - Op√ß√£o 3:
  - Cada uma com:
    - Por√ß√µes em gramas/unidades
    - Calorias semelhantes (¬±10%)
    - Macros equilibrados
  - Nunca oriente o cliente a consumir mais de uma op√ß√£o por refei√ß√£o

- Inclua substitui√ß√µes inteligentes para prote√≠nas, carboidratos e gorduras
- Sugira h√°bitos saud√°veis e suplementos conforme objetivo (respeitando hist√≥rico)

${lixoAtivo ? `
üçï **Inclua uma se√ß√£o chamada "Dia do Lixo"**:
- Explique o conceito
- Sugira alimentos
- Recomende o melhor dia da semana
- Finalize com incentivo/motiva√ß√£o
` : ''}

${treinoAtivo ? `
üèãÔ∏è **Inclua uma se√ß√£o chamada "Plano de Treino Personalizado"**:
- Divida a semana com foco muscular
- Para cada dia:
  - Exerc√≠cios (4 a 6)
  - S√©ries, repeti√ß√µes, descanso
  - Dicas t√©cnicas
- Inclua varia√ß√µes para treino em casa
` : ''}

üí° HTML:
- Use <h1>, <h2>, <h3> para t√≠tulos
- <p> para explica√ß√µes
- <ul><li> para listas
- N√£o usar <table>
- Estilo CSS inline e leve
- Envolver tudo em <div class='receita'> ... </div>

‚ö†Ô∏è Aten√ß√£o:
- N√£o inclua <html>, <head> ou <body>
- N√£o use markdown
- N√£o insira coment√°rios no c√≥digo

Visual moderno, leve, com cara de eBook profissional.

üõë **Aviso Importante:** Esta dieta foi gerada automaticamente pela Nutrify com base nos dados fornecidos pelo usu√°rio. Ela **n√£o substitui uma consulta com um nutricionista qualificado**. Sempre que poss√≠vel, busque acompanhamento profissional individualizado.
`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
    });

    let resposta = completion.choices?.[0]?.message?.content || "";
    resposta = resposta.replace(/```html|```/g, "").trim();

    if (!resposta) {
      console.error("Resposta vazia da OpenAI", completion);
      throw new Error("Erro: Resposta vazia da OpenAI.");
    }

    return resposta;
  } catch (error) {
    console.error("Erro na gera√ß√£o da receita:", error);
    throw new Error(`Erro na gera√ß√£o da receita: ${error.message}`);
  }
};
