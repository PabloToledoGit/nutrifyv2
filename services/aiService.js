import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

export const gerarTextoReceita = async (userData) => {
  const {
    peso,
    altura,
    idade,
    genero,
    calorias: caloriasBase,
    alimentosSelecionadosCafe,
    alimentosSelecionadosAlmoco,
    alimentosSelecionadosLanche,
    alimentosSelecionadosJanta,
    nivelAtividade,
    planoNome,
    historicoSaude = "",
    incluiTreino = false,
    incluiDiaLixo = false
  } = userData;

  const treinoAtivo = String(incluiTreino).toLowerCase() === 'true' || incluiTreino === true;
  const lixoAtivo = String(incluiDiaLixo).toLowerCase() === 'true' || incluiDiaLixo === true;

  const alturaEmMetros = altura / 100;
  const imc = peso / (alturaEmMetros * alturaEmMetros);

  let categoriaIMC = "";
  if (imc < 18.5) categoriaIMC = "Baixo";
  else if (imc < 25) categoriaIMC = "Eutr√≥fico";
  else if (imc < 30) categoriaIMC = "Sobrepeso";
  else if (imc < 35) categoriaIMC = "Obesidade I";
  else if (imc < 40) categoriaIMC = "Obesidade II";
  else categoriaIMC = "Obesidade III";

  const tabelaProteina = {
    Masculino: {
      "Baixo": 2.2,
      "Eutr√≥fico": 2.0,
      "Sobrepeso": 1.8,
      "Obesidade I": 1.6,
      "Obesidade II": 1.4,
      "Obesidade III": 1.2,
    },
    Feminino: {
      "Baixo": 2.2,
      "Eutr√≥fico": 1.9,
      "Sobrepeso": 1.6,
      "Obesidade I": 1.4,
      "Obesidade II": 1.2,
      "Obesidade III": 1.0,
    }
  };

  const proteinaPorKg = tabelaProteina[genero]?.[categoriaIMC] || 2.0;
  const proteinaTotalG = Math.round(peso * proteinaPorKg);
  const proteinaKcal = proteinaTotalG * 4;

  // üî• Ajuste de calorias com base no plano e IMC
  let calorias = caloriasBase;
  if (planoNome?.toLowerCase().includes("emagrecer power")) {
    calorias = Math.round(caloriasBase - (Math.random() * 100 + 600)); // -600 a -700
  } else if (planoNome?.toLowerCase().includes("emagrecer") || categoriaIMC === "Sobrepeso" || categoriaIMC.includes("Obesidade")) {
    calorias = Math.round(caloriasBase - 500);
  } else if (planoNome?.toLowerCase().includes("massa") || planoNome?.toLowerCase().includes("hipertrofia")) {
    if (categoriaIMC === "Baixo" || categoriaIMC === "Eutr√≥fico") {
      calorias = Math.round(caloriasBase + 300);
    } else {
      calorias = Math.round(caloriasBase - 500);
    }
  }

  // Arredondar para valor mais pr√≥ximo de 50 (ex: 1932 ‚Üí 1950)
  calorias = Math.round(calorias / 50) * 50;

  console.log("[Prompt] treinoAtivo:", treinoAtivo);
  console.log("[Prompt] lixoAtivo:", lixoAtivo);

  const prompt = `
**Aten√ß√£o: Priorize o hist√≥rico de sa√∫de do cliente em todas as decis√µes da dieta e treino. Nenhum alimento, suplemento ou atividade deve ser recomendada caso contrarie restri√ß√µes ou condi√ß√µes descritas.**

Hist√≥rico de sa√∫de informado pelo cliente:
${historicoSaude}

Utilize os dados abaixo para gerar um plano nutricional${treinoAtivo ? ' e de treino' : ''} personalizado em **HTML e CSS embutido**, com apar√™ncia visual semelhante ao plano "Dieta NutriInteligente", mas adaptado √† identidade moderna e limpa do Nutrify (tons de verde, blocos bem definidos, t√≠tulos claros e se√ß√µes bem divididas).

Informa√ß√µes do Usu√°rio:
- Nome do Plano: ${planoNome}
- Peso: ${peso} kg
- Altura: ${altura} cm
- Idade: ${idade} anos
- G√™nero: ${genero}
- IMC: ${imc.toFixed(2)} (${categoriaIMC})
- N√≠vel de Atividade F√≠sica: ${nivelAtividade} (multiplicador da f√≥rmula Harris-Benedict)
- Calorias ajustadas para o plano: ${calorias}

Prefer√™ncias Alimentares:
- Caf√© da Manh√£: ${alimentosSelecionadosCafe}
- Almo√ßo: ${alimentosSelecionadosAlmoco}
- Lanche: ${alimentosSelecionadosLanche}
- Jantar: ${alimentosSelecionadosJanta}

üìå **Regras para o Plano:**
- Inclua um aviso de exclusividade e privacidade no topo
- Calcule e explique o **IMC** e a **ingest√£o ideal de √°gua**
- Calcule os **macronutrientes di√°rios** com base nas calorias e peso corporal:
  - **Prote√≠na:** ${proteinaPorKg.toFixed(1)}g/kg (‚âà ${proteinaTotalG}g = ${proteinaKcal} kcal)
  - **Gordura:** 1g/kg (‚âà ${peso}g = ${peso * 9} kcal)
  - **Carboidrato:** Calorias restantes ap√≥s prote√≠na e gordura
  - Convers√µes:
    - Prote√≠na e Carboidrato: 4 kcal/g
    - Gordura: 9 kcal/g
- Mostre os macros com gramas e calorias

- Divida as refei√ß√µes com:
  - Hor√°rio + calorias estimadas
  - 3 op√ß√µes por refei√ß√£o, bem balanceadas (10% de varia√ß√£o no m√°ximo)
  - Nunca oriente consumir mais de uma op√ß√£o por refei√ß√£o

- Inclua substitui√ß√µes inteligentes e sugest√µes de h√°bitos/suplementos

${lixoAtivo ? `
üçï **Se√ß√£o "Dia do Lixo"**:
- Explica√ß√£o sobre refei√ß√£o livre
- Sugest√µes do que pode consumir
- Melhor dia da semana
- Refor√ßo motivacional
` : ''}

${treinoAtivo ? `
üèãÔ∏è **Se√ß√£o de Treino**:
- Treino semanal com 4 a 6 exerc√≠cios/dia
- Nome, s√©ries, repeti√ß√µes, descanso
- Varia√ß√µes para treinar em casa
` : ''}

üí° Estrutura HTML:
- Use tags sem√¢nticas: <h1>, <p>, <ul>, etc
- Inclua classes CSS inline
- Todo conte√∫do dentro de <div class='receita'>...</div>
- N√£o use <html>, <head>, <body>, nem coment√°rios
`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
    });

    let resposta = completion.choices?.[0]?.message?.content || "";
    resposta = resposta.replace(/```html|```/g, "").trim();

    if (!resposta) {
      console.error("Resposta vazia da OpenAI", completion);
      throw new Error("Erro: Resposta vazia da OpenAI.");
    }

    return resposta;
  } catch (error) {
    console.error("Erro na gera√ß√£o da receita:", error);
    throw new Error(`Erro na gera√ß√£o da receita: ${error.message}`);
  }
};
